todo


bits vom output erst nach ein paar ticks abgreifen und gegen eingabe vergleichen


testsuite einbauen
bitstreams 
und einzelne bits flippen 
iterativ hinzufügen
für bitstreams bis zu einer bestimmten länge

Wichtige Parameter eines Faltungscodes sind die Einflusslänge L und die Coderate R.

###




bits gefplippt weil setzten hat nicht funktioniert


wahrscheinlichkeit ist nicht das richtige 
wie dann?
iterativ streams suchen für die es nicht funktioniert und dann hinzufügen?

es dauert sehr lange, wenn die länge erhöht wird

die microticks sind immer noch nicht ausreichend z.b. bei register + not ?
liegt das an der größe der zahl?


speichern?


####


ausgänge müssen nicht verwertet werden, teile können mit ihren ausgängen unverbunden sein
dann kann man sie in der ausgabe weglassen

-


10-20 bits lang
einige zufällige bitströme erstellen


~10.000 variablen wären gut


wahrscheinlichkeit dass ein bit geflippt wird
aber wenn mehr als 3 fehler sollen nicht im bitström vorkommen

+ weiteren fehlergenerator für z.b. burst fehler (aber nicht mehr als 5 fehler aufeinander)



iteratives vorghene:
2/3 bitstörme schaltung erstellen
testen mit weiteren bitströmen außerhalb des sat solvers ob es noch funktioniert
(suchen ohne fehler, ob die bitströme identisch wieder rauskommen)
wenn es nicht funktioniert, dann zu der ursprünlgichen formel hinzufügne und neue schaltun gmit sat solver suchen





======


Abstract

In der digitalen Datenübertragung und bei der Speicherung von Daten werden Bits in einem analogen Signal kodiert. Durch Störungen in dem Medium können Bitfehler auftreten. Deshalb werden bei der Speicherung und Übertragung von Daten auf Bitebene Fehlerkorrekturverfahren eingesetzt. Diese dienen dazu, Fehler automatisch zu finden und wenn möglich auch zu korrigieren. Dabei werden den Nutzdaten zusätzliche Redudanz hinzufügt: dem ursprünglichen Bitsttrom werden auf der Senderseite zusätzliche Bits hinzugefügt. Das zu übertragende Codewort ist also länger als die ursprünglichen Nutzungsdaten. Treten Bitfehler im Codewort auf, können redudanten Informationen genutzt werden um die Fehler zu erkennen und automatisch zu korrigieren (Vorwärtsfehlerkorrektur). Eine Form von Vorwärtsfehlerkorrektur sind neben Blockcodes sogennante Faltungscodes. Namensgebend hierfür ist das mathematische Verfahren der Faltungen, wobei die Informationen, die in den Nutzdaten enthalten sind, über mehrere Stellen des Codeworts verteilt werden. Faltungscodes können durch digitalen Schaltungen mit Hilfe von Schieberegistern realisiert werden. 

Für die Konstruktion von Faltungscodes gibt es kein bekanntes systematisches Verfahren. Geeignete Schaltpläne für Faltungscodierer wurden in den 80er Jahren durch exhaustive Suche vor allem von der NASA gefunden. Da digitale Schaltungen und boolsche Formeln sich ohne Informationsverlust ineinander übersetzen lassen, liegt es nahe, Schaltplänte für Faltungscodierer als Lösungen einer boolsche Formeln zu finden. Dabei werden die Eigenschaften der benutzen Schaltteile (ANDs, NOTs, Register usw.), die Eigenschaften der Schaltung (Verbindungen zwiwschen den Schaltteilen, Nicht-Zirkulärität usw.) und die erwünschten fehlerkorrigierenden Eigenschaften in der Formel (Bitfehler im übertragenden Codewort) kodiert. Eine Belegung, die die Formel erfüllt, ist dann ein konkreter Schaltplan, der diese Eigenschaften erfüllt, d.h. ein Faltungskodierer mit entsprechender Güte. Diese Verfahren kann sowohl zum Finden von En- als auch Decodern genutzt werden. 

In der Entwicklung von SAT Solvern hat es in den letzten Jahren große Fortschritte gegeben. SAT Solver können oft mit einer sehr großen Anzahl von Klauseln und Variablen noch Ergebnisse finden. Trotz der schlechten worst-case Laufzeit werden sie in vielen Anwendungsbereichen zum Finden von Lösungen eingesetzt, in denen sich die Problemstellung in ein Erfüllbarkeitsproblem übersetzten lässt. 

Die Bachelorarbeit will versuchen Schaltpläne für Faltungskodierer mit Hilfe eines SAT Solver zu finden. Die erwartete Herausforderung liegt zum einen in der Aufgabe, alle notwendigen Eigenschaften der Schaltung und die fehlekorrigierenden Eigenschaften des dadurch repräsentierten Faltungskodierers in eine Formel zu übersetzen. Zum anderen wird sich ganz praktisch zeigen, ob die Leistung eines SAT Solver ausreicht, um eine Lösung der Formel in vertretbarer Zeit zu finden. Es ist zu erwarten, dass die Anzahl der Klauseln vor allem mit der Länge der zu testenden Codewörter massiv zunimmt. 

Idealerweies lassen sich durch dieses Verfahren automatisiert die Ergebnisse bereits bekannter Faltungskodierer reproduzieren. Im besten Fall können sogar neue Faltungskodierer gefunden werden. Im schlechtesten Fall, stellt sich heraus, dass eine Formel, die alle benötigten Eigenschaften eines Faltungskodierers enthält, zu groß ist, um in vertretbarer Zeit von einem SAT Solver gelöst zu werden.